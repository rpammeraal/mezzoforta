#!/bin/sh

if [ $# -eq 0 ]
  then
	echo Usage 'backupPostgresForMigration <dbname> <schema> <dst sqlite db>'
	echo <dst sqlite db> needs to be a PREFORMATTED MezzoForta! database.
	exit;
fi

DB=$1
SCHEMA=$2
SQLITEDB=$3
PORT=22500
HOST=mars
TEMPDB=tempdb

echo copying source database
#dropdb --host=$HOST --port=$PORT --if-exists $TEMPDB
#createdb --host=$HOST --port=$PORT $TEMPDB -T "$DB"

psql -h $HOST -p $PORT template1 --quiet << END > /dev/null
	DROP DATABASE IF EXISTS "tempdb";
	SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$DB';
	CREATE DATABASE "tempdb" WITH TEMPLATE "$DB"
END

echo altering temp database
psql -h $HOST -p $PORT $TEMPDB --quiet << END
	ALTER SEQUENCE $SCHEMA.artist_artist_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.artist_rel_artist_rel_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.song_song_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.performance_performance_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.record_record_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.record_performance_record_performance_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.online_performance_online_performance_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.playlist_playlist_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.playlist_detail_playlist_detail_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.chart_chart_id_seq OWNED BY none;
	ALTER SEQUENCE $SCHEMA.chart_performance_chart_performance_id_seq OWNED BY none;
END

echo dump temp database to /tmp/$TEMPDB.out
echo "BEGIN;" > /tmp/$TEMPDB.out

pg_dump --dbname=$TEMPDB --host=$HOST --port=$PORT \
	--no-owner \
	--no-privileges \
	--column-inserts \
	--inserts \
	--no-security-labels \
	--section=data \
	-C \
	-T article                     \
	-T config_daemon               \
	-T config_host                 \
	-T config_host_digital_format  \
	-T configuration               \
	-T digital_format              \
	-T greatest_hits_record        \
	-T namespace                   \
	-T password                    \
	-T source                      \
	-T status                      \
	-T public.password_userid_seq  \
	-T search_result               \
	-T $SCHEMA.category            \
	-T $SCHEMA.category_index      \
	-T genre                       \
	-T $SCHEMA.lyrics              \
	-t $SCHEMA.artist              \
	-t $SCHEMA.artist_match        \
	-t $SCHEMA.artist_rel          \
	-t $SCHEMA.song                \
	-t $SCHEMA.performance         \
	-t $SCHEMA.record              \
	-t $SCHEMA.record_performance  \
	-t $SCHEMA.online_performance  \
	-t $SCHEMA.playlist            \
	-t $SCHEMA.playlist_detail     \
	-t $SCHEMA.chart               \
	-t $SCHEMA.chart_performance   \
| grep -v '^SET'  \
| grep -v '^SELECT pg_'  \
| grep -v 'CREATE DATABASE'  \
| grep -v '\\connect'  \
| grep -v "VALUES (0, 1, 'UNKNOWN ALBUM'," \
| sed "s/DEFAULT now()//" \
| sed "s/::text//g" \
| sed "s/, false/, 'f'/g" \
| sed "s/, true/, 't'/g" \
| sed "s/DEFAULT nextval('password_userid_seq'::regclass)//" \
| sed "s/DEFAULT nextval('artist_artist_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('artist_rel_artist_rel_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('song_song_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('performance_performance_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('record_record_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('record_performance_record_performance_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('online_performance_online_performance_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('playlist_playlist_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('playlist_detail_playlist_detail_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('chart_chart_id_seq'::regclass)//" \
| sed "s/DEFAULT nextval('chart_performance_chart_performance_id_seq'::regclass)//" \
| sed "s/INTO rock\./INTO /" \
>> /tmp/$TEMPDB.out

pg_dump --dbname=$TEMPDB --host=$HOST --port=$PORT \
	--no-owner \
	--no-privileges \
	--column-inserts \
	--inserts \
	--no-security-labels \
	--section=data \
	-t $SCHEMA.lyrics     \
| grep -v '^SET'  \
| grep -v '^SELECT pg_'  \
| sed "s/DEFAULT now()//" \
| sed "s/::text//g" \
| sed "s/INTO rock\./INTO /" \
>> /tmp/$TEMPDB.out
echo "COMMIT;" >> /tmp/$TEMPDB.out

echo build sqlite database $SQLITEDB
cat /tmp/$TEMPDB.out | sqlite3 $SQLITEDB
dropdb --host=$HOST --port=$PORT --if-exists $TEMPDB

#	cleanup
echo cleaning up
rm -f /tmp/$DB.dump
rm -f /tmp/$TEMPDB.out
